# ───────────── Survival Game Skript par Spart ─────────────

# ───────────── COMMANDES DE CONFIGURATION ─────────────
command /sg_setlobby:
    permission: sg.admin
    trigger:
        set {sg.spawn.lobby} to location of player
        send "&aLobby défini ici !" to player

command /sg_setspawn <number>:
    permission: sg.admin
    trigger:
        if arg-1 is number:
            set {_index} to arg-1  # L'argument est un nombre
            set {sg.spawn.arena.%{_index}%} to location of player
            send "&aSpawn %{_index}% défini ici !" to player

# ───────────── COMMANDE POUR REJOINDRE ─────────────
command /sg_join:
    trigger:
        # Si l'état n'est pas défini, on le met à "waiting"
        if {sg.state} is not set:
            set {sg.state} to "waiting"
        if {sg.close} is not set:
            set {sg.close} to false

        if {sg.close} is false:
            if {sg.state} is "waiting" or "starting": # Si l'état est "waiting" ou "starting"
                if player is not in {sg.players::*}:  # Vérification si le joueur n'est pas déjà dans la partie
                    clear potion effects of player
                    clear inventory of player
                    add player to {sg.players::*}
                    apply saturation potion of tier 3 without any particles whilst hiding the potion icon to the player for 999 days 
                    set slot 8 of player to red bed named "&c&lQuitter la partie"
                    send "&aTu as rejoint Survival Game !" to player
                    wait 2 tick
                    teleport player to {sg.spawn.lobby}
                else:
                    send "&eTu es déjà dans la partie." to player
            else if {sg.state} is "started":  # Si la partie a déjà commencé
                send "&cLa partie est déjà en cours, tu ne peux plus rejoindre." to player
        else:
            send "&cLa partie est déjà en cours, tu ne peux plus rejoindre." to player

command /sg_leave:
    trigger:
        set {_name} to player's name

        # Vérifie si le joueur est bien dans la partie
        set {_found} to false
        loop {sg.players::*}:
            if loop-value's name is {_name}:
                execute loop-value command "spawn"
                remove loop-value from {sg.players::*}
                set {_found} to true
                send "&cTu as quitté la partie Survival Game." to player
                stop
        if {_found} is false:
            stop

        # Si plus de joueurs, réinitialiser l’état
        if size of {sg.players::*} is 0:
            set {sg.state} to "waiting"

command /sg_forcestop:
    permission: sg.admin
    trigger:
        set {sg.state} to "waiting"
        set {sg.close} to "false"
        clear {sg.players::*}
        delete {sg.timer}
        endgame()
        broadcast "&eLa partie a été réinitialisée et est maintenant prête à recommencer."

# ───────────── COMMANDE POUR RÉNITIALISÉ LA ZONE ─────────────
command /sg_setzone1:
    permission: sg.admin
    trigger:
        set {sg.zone1} to location of player
        send "&aPremier point défini en &e%location of player%"

command /sg_setzone2:
    permission: sg.admin
    trigger:
        set {sg.zone2} to location of player
        send "&aDeuxième point défini en &e%location of player%"

command /sg_fillchests:
    permission: sg.admin
    trigger:
        if {sg.zone1} is not set:
            send "&cLe point 1 n'est pas défini !"
        if {sg.zone2} is not set:
            send "&cLe point 2 n'est pas défini !"
        regenchest()


# ───────────── COMMANDE OPTIONEL ─────────────
command /sg_list:
    permission: sg.admin
    trigger:
        send "&eJoueurs en jeu : &a%{sg.players::*}%"


command /sg_setmaxborder <number>:
    permission: sg.admin
    trigger:
        set {sg.size} to argument
        set {sg._x} to rounded x-coordinate of player
        set {sg._z} to rounded z-coordinate of player
        set {sg._cmd1} to "border set %{sg._world}% %{sg.size}% %{sg._x}% %{sg._z}%" #START GAME SIZE
        set {sg._cmd2} to "border set %{sg._world}% 40 %{sg._x}% %{sg._z}%" #END GAME SIZE
        set {sg._world} to world of player
# ───────────── LANCEMENT AUTOMATIQUE ─────────────
every 1 second:
    if size of {sg.players::*} > 0:
        if {sg.state} is "waiting":
            if size of {sg.players::*} >= 2:
                if {sg.starting} is not set:
                    execute console command {sg._cmd1} #TAILL DEBUT DE GAME
                    set {sg.starting} to true
                    set {sg.countdown} to 60
                    set {sg.state} to "starting"
                    delete {sg.starting}
            else:
                send action bar "&e&lEncore %(2-(size of {sg.players::*}))% joueur(s) avant de lancer la partie !" to {sg.players::*}
                
        if {sg.state} is "starting":
            subtract 1 from {sg.countdown}
            send action bar "&e&lDémarrage dans &c&l%{sg.countdown}%" to {sg.players::*}
            if {sg.countdown} <= 0:
                broadcast "TEST2"
                set {sg.state} to "started"
                send "&eLe PvP est désactivé pendant 30 secondes." to {sg.players::*}
                set {sg.frozen} to false
                play sound "item.shield.break" to {sg.players::*}
                send title " " to {sg.players::*}
                set {sg.pvp} to false
                delete {sg.starting}
                delete {sg.countdown}
                clear {sg.allplayers::*}

            else if {sg.countdown} <= 10:
                set {sg.close} to true
                set {sg.frozen} to true
                send title "&eDémarrage dans &c%{sg.countdown}%" to {sg.players::*}
                play sound "block.note_block.hat" to {sg.players::*}
                if {sg.countdown} > 9:
                    tpplayer()

    #Si un joueur quitte la file d'attente au lobby
    if {sg.state} is "starting":
        if size of {sg.players::*} < 2:
            set {sg.state} to "waiting"

# ───────────── COMPTAGE DU TEMPS COMBAT FINAL ET FIN AUTOMATIQUE ─────────────
    if {sg.state} is "started":
        if {sg.timer} is not set:
            set {sg.timer} to 350 # 5:50
            set {sg.divtimer} to ({sg.timer}/2)-125
        subtract 1 from {sg.timer}
        set {_minutes} to floor({sg.timer} / 60)
        set {_seconds} to {sg.timer} - ({_minutes} * 60)
        if {_minutes} = 5:
            if {_seconds} = 20:
                send "&eLe PvP est activé !" to {sg.players::*}
                play sound "entity.blaze.shoot" to {sg.players::*}
                set {sg.pvp} to true

        set {_formattedSeconds} to "%{_seconds}%"
        if {_minutes} = floor({sg.divtimer}/60):
            broadcast "TEST COMBAT FINAL"
            if {_seconds} >= 59:
                execute console command {sg._cmd2}
                send title "&c&lCombat Final !" to {sg.players::*}
                play sound "entity.ender_dragon.growl" to {sg.players::*}
                set {_i} to 1
                loop {sg.players::*}:
                    teleport loop-value to {sg.spawn.arena.%{_i}%}
                    send "Téléporté %{loop-value}% à %{sg.spawn.arena.%{_i}%}%" to console
                    add 1 to {_i}

        if {_minutes} > floor({sg.divtimer} / 60):
            send action bar "&e&lCombat final dans: &c&l%({_minutes})%:%{_seconds}%" to {sg.players::*}
        else:
            send action bar "&e&lFin de la partie dans &c&l%{_minutes}%:%{_seconds}%" to {sg.players::*}

        if {sg.timer} <= 0:
            wait 1 tick
            set {sg.state} to "ended"
            endgame()
            
# ───────────── ÉVÉNEMENT DE MORT / FIN DE PARTIE ─────────────
on death of player:
    if {sg.state} is "started":
        # Compteur de kills
        if attacker is a player:
            add 1 to {sg.kills.%attacker%}
            send "&aTu as maintenant &e%{sg.kills.%attacker%}% &akill(s) !" to attacker
            
            force victim to respawn
            wait 1 tick
            clear inventory of victim
            set game mode of victim to survival
            execute victim command "spawn"
            remove victim from {sg.players::*}
        if size of {sg.players::*} is 1:
            endgame()
            
# ───────────── TELEPORT PLAYER FREEZ AND CLEAR ─────────────
function tpplayer():
    set {_i} to 1
    loop {sg.players::*}:
        wait 1 tick
        set {_p} to loop-value
        teleport {_p} to {sg.spawn.arena.%{_i}%}
        set {_p}'s game mode to survival
        delete {sg.kills.%{_p}%}
        set {_p}'s health to 20
        set {_p}'s food level to 20
        clear potion effects of {_p}
        clear inventory of {_p}
        add 1 to {_i}

on player move:
    if {sg.frozen} is true:
        loop {sg.players::*}:
            if loop-value is player:
                cancel event
                stop

# ───────────── GESTION DU PVP ─────────────
on damage:
    if {sg.pvp} is false:
        if victim is a player:
            loop {sg.players::*}:
                if loop-value is victim:
                    cancel event
                    stop

# ───────────── FIN DE PARTIE - VICTOIRE AUTOMATIQUE APRÈS MORT ─────────────
on disconnect:
    remove player from {sg.players::*}
    if size of {sg.players::*} = 1:
        if {sg.state} is "started":
            endgame()
        if {sg.state} is "waiting" or "starting":
            set {sg.state} to "waiting"

function endgame():
    if size of {sg.players::*} = 1 or 0:
        set {sg.state} to "ended"

    wait  1 tick
    if {sg.state} = "ended":
        clear inventory of {sg.players::*}
        if {sg.kills.%first element of {sg.players::*}%} > 0:
            broadcast "&a&l%first element of {sg.players::*}% &6remporte la partie avec &c&l%{sg.kills.%first element of {sg.players::*}%}% &6kill(s) !"
            play sound "entity.player.levelup" to first element of {sg.players::*}
        else:
            broadcast "&eLa partie est terminée. &cPersonne ne remporte la victoire !" 

        regenchest()
        wait 5 seconds 
        set {sg.close} to false
        set {sg.state} to "waiting"
        set {_i} to 1
        loop {sg.players::*}:
            execute loop-value command "spawn"
            add 1 to {_i}
        delete {sg.timer}
        set {sg.pvp} to false
        clear {sg.players::*}

# ───────────── REGEN LES COFFRES ─────────────
function regenchest():
    set {_minX} to min(x-coordinate of {sg.zone1}, x-coordinate of {sg.zone2})
    set {_maxX} to max(x-coordinate of {sg.zone1}, x-coordinate of {sg.zone2})
    set {_minY} to min(y-coordinate of {sg.zone1}, y-coordinate of {sg.zone2})
    set {_maxY} to max(y-coordinate of {sg.zone1}, y-coordinate of {sg.zone2})
    set {_minZ} to min(z-coordinate of {sg.zone1}, z-coordinate of {sg.zone2})
    set {_maxZ} to max(z-coordinate of {sg.zone1}, z-coordinate of {sg.zone2})
    set {_world} to world of {sg.zone1}

    set {_x} to {_minX}
    while {_x} <= {_maxX}:  # Boucle while avec condition
        set {_y} to {_minY}
        while {_y} <= {_maxY}:  # Boucle while pour Y
            set {_z} to {_minZ}
            while {_z} <= {_maxZ}:  # Boucle while pour Z
                set {_loc} to location at {_x}, {_y}, {_z} in {_world}
                if block at {_loc} is chest:
                    clear block at {_loc}'s inventory
                    fillChest({_loc})  # Appel de la fonction fillChest pour remplir le coffre
                set {_z} to {_z} + 1  # Incrémentation de Z
            set {_y} to {_y} + 1  # Incrémentation de Y
        set {_x} to {_x} + 1  # Incrémentation de X
        wait 1 ticks

function fillChest(loc: location):
    set {_inv} to inventory of block at {_loc}
    set {_itemCount} to random integer between 3 and 6
    set {_usedItems::*} to nothing
    set {_usedSlots::*} to nothing

    loop {_itemCount} times:
        loop 10 times:
            set {_item} to randomChestItem()
            set {_itemType} to type of {_item} # récupère l'ID de l'item

            if {_itemType} is not in {_usedItems::*}:
                add {_itemType} to {_usedItems::*}
                set {_placed} to false
                loop 10 times:
                    set {_slot} to random integer between 0 and 26
                    if {_slot} is not in {_usedSlots::*}:
                        add {_slot} to {_usedSlots::*}
                        set slot {_slot} of {_inv} to {_item}
                        set {_placed} to true
                        exit loop
                if {_placed} is true:
                    exit loop


function randomChestItem() :: item:
    set {_common::*} to baked potato and arrow and wooden sword and snowball and stone sword and chainmail helmet and chainmail boots and carrot and cooked chicken
    set {_rare::*} to iron sword and iron axe and bow and splash potion of healing and iron helmet and iron boots and chainmail leggings and chainmail chestplate and fishing rod 
    set {_epic::*} to diamond sword and golden apple and diamond helmet and diamond boots and potion of strength and trident

    set {_roll} to random integer between 1 and 100
    if {_roll} <= 60:
        set {_item} to random element out of {_common::*}
    else if {_roll} <= 95:
        set {_item} to random element out of {_rare::*}
    else:
        set {_item} to random element out of {_epic::*}

    if {_item} is arrow:
        set amount of {_item} to random integer between 2 and 5
    else if {_item} is snowball:
        set amount of {_item} to random integer between 2 and 4
    else if {_item} is cooked chicken:
        set amount of {_item} to random integer between 2 and 5
    else if {_item} is baked potato:
        set amount of {_item} to random integer between 1 and 4
    else if {_item} is carrot:
        set amount of {_item} to random integer between 1 and 4
    else:
        set amount of {_item} to 1

    return {_item}

# ───────────── BONUS ─────────────
on skript start:  
    set {sg.state} to "waiting"
    clear {sg.players::*}
    delete {sg.timer}

on break:
    if {sg.state} is "waiting" or "started" or "starting":
        loop {sg.players::*}:
            if loop-value is player:
                cancel event
                stop

on rightclick holding a red bed:
    if name of player's tool is "&c&lQuitter la partie":
        execute player command "sg_leave"

on drop:
    if event-item is red bed named "&c&lQuitter la partie":
        cancel event